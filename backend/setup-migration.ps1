# Script PowerShell para facilitar a migra√ß√£o no Windows
Write-Host "üöÄ Assistente de Migra√ß√£o - JSON/localStorage ‚Üí PostgreSQL`n" -ForegroundColor Cyan

# Verificar Docker
Write-Host "Verificando Docker..." -ForegroundColor Yellow
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker instalado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o encontrado. Por favor, instale o Docker Desktop primeiro." -ForegroundColor Red
    Write-Host "   Download: https://www.docker.com/products/docker-desktop" -ForegroundColor Yellow
    exit 1
}

# Verificar docker-compose.yml
$dockerComposePath = Join-Path $PSScriptRoot "..\docker-compose.yml"
if (-not (Test-Path $dockerComposePath)) {
    Write-Host "‚ùå docker-compose.yml n√£o encontrado na raiz do projeto" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ docker-compose.yml encontrado" -ForegroundColor Green

# Verificar/Criar .env
$envPath = Join-Path $PSScriptRoot ".env"
if (-not (Test-Path $envPath)) {
    Write-Host "‚ö†Ô∏è  Arquivo .env n√£o encontrado, criando..." -ForegroundColor Yellow
    $envContent = @"
# Configura√ß√£o PostgreSQL
PGHOST=localhost
PGPORT=5432
PGUSER=postgres
PGPASSWORD=postgres
PGDATABASE=pecas_db

# Ou use DATABASE_URL (alternativa)
# DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pecas_db

PORT=3001
"@
    Set-Content -Path $envPath -Value $envContent
    Write-Host "‚úÖ Arquivo .env criado em backend\.env" -ForegroundColor Green
    Write-Host "   Por favor, ajuste as credenciais se necess√°rio`n" -ForegroundColor Yellow
}

# Passo 1: Levantar PostgreSQL
Write-Host "`nüì¶ Passo 1: Levantar PostgreSQL com Docker..." -ForegroundColor Cyan
try {
    Set-Location (Split-Path $PSScriptRoot)
    docker-compose up -d
    Write-Host "‚úÖ PostgreSQL iniciado`n" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao iniciar PostgreSQL: $_" -ForegroundColor Red
    exit 1
}

# Aguardar PostgreSQL inicializar
Write-Host "‚è≥ Aguardando PostgreSQL inicializar (5 segundos)..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# Passo 2: Instalar depend√™ncias
Write-Host "`nüì¶ Passo 2: Instalando depend√™ncias do backend..." -ForegroundColor Cyan
Set-Location $PSScriptRoot
try {
    npm install
    Write-Host "‚úÖ Depend√™ncias instaladas`n" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao instalar depend√™ncias: $_" -ForegroundColor Red
    exit 1
}

# Passo 3: Executar migra√ß√£o
Write-Host "üì¶ Passo 3: Executando migra√ß√£o..." -ForegroundColor Cyan
try {
    node migrate.js
    Write-Host "`n‚úÖ Migra√ß√£o conclu√≠da com sucesso!`n" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na migra√ß√£o: $_" -ForegroundColor Red
    Write-Host "`nTente executar manualmente: cd backend; node migrate.js" -ForegroundColor Yellow
    exit 1
}

# Sucesso!
Write-Host "üéâ Setup completo!`n" -ForegroundColor Green
Write-Host "Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "  1. cd backend; npm start          (iniciar backend)" -ForegroundColor White
Write-Host "  2. cd ..; npm run dev             (iniciar frontend em outro terminal)" -ForegroundColor White
Write-Host "  3. Abrir http://localhost:5173`n" -ForegroundColor White
Write-Host "Para mais detalhes, veja: MIGRACAO_DB.md`n" -ForegroundColor Yellow
